// Generated by CoffeeScript 1.3.3
(function() {
  var AI, AI_Selector, Ball, Court, Game, Logger, Opponent, Paddle, root;

  AI = require('./ai');

  AI_Selector = require('./ai_selector').AI_Selector;

  Court = require('./court').Court;

  Ball = require('./ball').Ball;

  Paddle = require('./paddle').Paddle;

  Opponent = require('./opponent').Opponent;

  Logger = require('./logger');

  Game = (function() {

    function Game(strategy) {
      this.strategy = strategy != null ? strategy : 'advanced';
      this.time = 0;
    }

    Game.prototype.init = function(data) {
      var conf, selector;
      conf = data.conf;
      this.court = Court.getInstance(conf.maxWidth, conf.maxHeight, conf.ballRadius);
      this.ball = new Ball(data.ball.pos, conf.ballRadius);
      this.paddle = new Paddle(data.left.y, data.conf.paddleWidth, conf.paddleHeight);
      this.opponent = new Opponent(data.right.y, data.conf.paddleWidth, conf.paddleHeight);
      selector = new AI_Selector;
      this.ai = selector.select(this.strategy);
      return Logger.log("Game", "selected strategy: " + this.strategy);
    };

    Game.prototype.update = function(data) {
      var dt, prediction;
      if (this.time === 0) {
        this.init(data);
        this.time = data.time;
        return {
          updateDirection: false
        };
      }
      dt = data.time - this.time;
      this.time = data.time;
      if (dt === 0) {
        return {
          updateDirection: false
        };
      }
      this.ball.update({
        x: data.ball.pos.x,
        y: data.ball.pos.y
      }, dt);
      this.paddle.update(data.left.y, dt);
      Logger.log("Game", "Paddle moving to: " + this.paddle.direction);
      this.opponent.update(data.right.y);
      prediction = this.predict(this.ball, this.opponent);
      Logger.log("Game", "Prediction: " + prediction.y);
      return this.makeMove(prediction);
    };

    Game.prototype.predict = function(ball, opponent) {
      if (ball.dx > 0) {
        return this.ai.defence(ball, opponent);
      } else if (ball.dx < 0) {
        return this.ai.attack(ball, opponent);
      }
    };

    Game.prototype.makeMove = function(prediction) {
      var newPrediction;
      if (this._isNearLimits(prediction)) {
        newPrediction = _setLimits(prediction.y);
        this.paddle.moveToCenter(newPrediction);
      }
      switch (prediction.hit) {
        case 'up':
          return this.paddle.moveToUpper(prediction.y);
        case 'down':
          return this.paddle.moveToLower(prediction.y);
        default:
          return this.paddle.moveToCenter(prediction.y);
      }
    };

    Game.prototype._isNearLimits = function(prediction) {
      var _ref;
      return (this.court.bottom - this.paddle.height < (_ref = prediction.y) && _ref < this.court.top + this.paddle.height);
    };

    Game.prototype._setLimits = function(y) {
      if (y < this.court.top + this.ball.radius) {
        y = this.court.top + this.ball.radius;
      } else if (y > this.court.bottom - this.ball.radius) {
        y = this.court.bottom - this.ball.radius;
      }
      return y;
    };

    return Game;

  })();

  root = typeof exports !== "undefined" && exports !== null ? exports : window;

  root.Game = Game;

}).call(this);
