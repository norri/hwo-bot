// Generated by CoffeeScript 1.3.3
(function() {
  var Logger, root;

  Logger = require('./logger');

  root = typeof exports !== "undefined" && exports !== null ? exports : window;

  root.intersect = function(point1, point2, point3, point4, direction) {
    var denom, ua, ub, x, y;
    denom = ((point4.y - point3.y) * (point2.x - point1.x)) - ((point4.x - point3.x) * (point2.y - point1.y));
    if (denom !== 0) {
      ua = (((point4.x - point3.x) * (point1.y - point3.y)) - ((point4.y - point3.y) * (point1.x - point3.x))) / denom;
      if ((ua >= 0) && (ua <= 1)) {
        ub = (((point2.x - point1.x) * (point1.y - point3.y)) - ((point2.y - point1.y) * (point1.x - point3.x))) / denom;
        if ((ub >= 0) && (ub <= 1)) {
          x = point1.x + (ua * (point2.x - point1.x));
          y = point1.y + (ua * (point2.y - point1.y));
          Logger.log("Helper", "intersect success: " + x + ", " + y);
          return {
            x: x,
            y: y,
            collision: direction
          };
        }
      }
    }
  };

  root.intersectWall = function(point1, point2, wallCoordinates, direction) {
    return root.intersect(point1, point2, wallCoordinates[0], wallCoordinates[1], direction);
  };

  root.clone = function(obj) {
    var flags, key, newInstance;
    if (!(obj != null) || typeof obj !== 'object') {
      return obj;
    }
    if (obj instanceof Date) {
      return new Date(obj.getTime());
    }
    if (obj instanceof RegExp) {
      flags = '';
      if (obj.global != null) {
        flags += 'g';
      }
      if (obj.ignoreCase != null) {
        flags += 'i';
      }
      if (obj.multiline != null) {
        flags += 'm';
      }
      if (obj.sticky != null) {
        flags += 'y';
      }
      return new RegExp(obj.source, flags);
    }
    newInstance = new obj.constructor();
    for (key in obj) {
      newInstance[key] = root.clone(obj[key]);
    }
    return newInstance;
  };

}).call(this);
