// Generated by CoffeeScript 1.3.3
(function() {
  var Paddle, root;

  Paddle = (function() {

    function Paddle(y, width, height) {
      this.y = y;
      this.width = width;
      this.height = height;
      this.direction = 0.0;
      this.maxSpeed = 15;
    }

    Paddle.prototype.update = function(newY, dt) {
      this.updateMaxSpeed(newY - this.y, dt);
      return this.y = newY;
    };

    Paddle.prototype.updateMaxSpeed = function(dy, dt) {
      var speed;
      speed = Math.abs(dy / dt);
      if (speed > this.maxSpeed) {
        return this.maxSpeed = speed;
      }
    };

    Paddle.prototype.moveToUpper = function(newY) {
      var stopCondition, updateDirection;
      if (!newY) {
        this.changeDirection(false);
      }
      stopCondition = (this.y < newY && newY < this.y + this.height / 2);
      updateDirection = this.getDirection(newY, stopCondition);
      return this.changeDirection(updateDirection);
    };

    Paddle.prototype.moveToLower = function(newY) {
      var stopCondition, updateDirection;
      if (!newY) {
        this.changeDirection(false);
      }
      stopCondition = (this.y + this.height / 2 < newY && newY < this.y + this.height);
      updateDirection = this.getDirection(newY, stopCondition);
      return this.changeDirection(updateDirection);
    };

    Paddle.prototype.moveToCenter = function(newY) {
      var stopCondition, updateDirection;
      if (!newY) {
        this.changeDirection(false);
      }
      stopCondition = (this.y <= newY && newY <= this.y + this.height);
      updateDirection = this.getDirection(newY, stopCondition);
      return this.changeDirection(updateDirection);
    };

    Paddle.prototype.getDirection = function(newY, stopCondition) {
      var updateDirection;
      updateDirection = false;
      if (stopCondition && !this.stopped()) {
        this.stop();
        updateDirection = true;
      } else if (newY < this.y && !this.movingUp()) {
        this.moveUp();
        updateDirection = true;
      } else if (newY > this.y + this.height && !this.movingDown()) {
        this.moveDown();
        updateDirection = true;
      }
      return updateDirection;
    };

    Paddle.prototype.maxMoveDistance = function(time) {
      return this.maxSpeed * time;
    };

    Paddle.prototype.movingDown = function() {
      return this.direction > 0.0;
    };

    Paddle.prototype.movingUp = function() {
      return this.direction < 0.0;
    };

    Paddle.prototype.stopped = function() {
      return this.direction === 0.0;
    };

    Paddle.prototype.moveUp = function() {
      return this.direction = -1.0;
    };

    Paddle.prototype.moveDown = function() {
      return this.direction = 1.0;
    };

    Paddle.prototype.stop = function() {
      return this.direction = 0.0;
    };

    Paddle.prototype.changeDirection = function(b) {
      return {
        updateDirection: b,
        direction: this.direction
      };
    };

    return Paddle;

  })();

  root = typeof exports !== "undefined" && exports !== null ? exports : window;

  root.Paddle = Paddle;

}).call(this);
