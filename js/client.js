// Generated by CoffeeScript 1.3.3
(function() {
  var Client, Logger, Pong, Tcp, host, name, opponent, port, strategy,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Tcp = require('./tcp_client');

  Pong = require('./game');

  Logger = require('./logger');

  Client = (function(_super) {

    __extends(Client, _super);

    function Client(name, host, port, opponent, strategy) {
      this.name = name;
      this.opponent = opponent;
      this.strategy = strategy;
      Client.__super__.constructor.call(this, host, port);
    }

    Client.prototype.onConnect = function(socket) {
      if (this.opponent === void 0) {
        this.join(this.name, socket);
      } else {
        this.requestDuel(this.name, this.opponent, socket);
      }
      return this.socket = socket;
    };

    Client.prototype.onDisconnect = function() {
      return process.exit;
    };

    Client.prototype.onMessage = function(message, socket) {
      var pos, result, winner;
      try {
        switch (message.msgType) {
          case "joined":
            return Logger.log("Client", "Game visualization URL " + message.data);
          case "gameStarted":
            this.game = new Pong.Game(this.strategy);
            return Logger.log("Client", "Bring it on " + message.data[1] + " !");
          case "gameIsOver":
            winner = message.data;
            if (winner === this.name) {
              return Logger.log("Client", "Victory!");
            } else {
              return Logger.log("Client", "We lost :(");
            }
            break;
          case "gameIsOn":
            pos = message.data.ball.pos;
            Logger.log("Client", "Time: " + message.data.time + ", Ball: (" + pos.x + "," + pos.y + "), Paddle: " + message.data.left.y + ", Opponent: " + message.data.right.y);
            result = this.game.update(message.data);
            if (result) {
              return this.makeMove(result, socket);
            }
            break;
          default:
            Logger.log("Client", "-- unrecognized message encountered:");
            return Logger.log("Client", message);
        }
      } catch (error) {
        return Logger.log("Client", "-- ball hit safety net: " + error);
      }
    };

    Client.prototype.join = function(name, socket) {
      var joinGame;
      joinGame = {
        msgType: "join",
        data: name
      };
      return this.respond(joinGame, socket);
    };

    Client.prototype.requestDuel = function(name, opponent, socket) {
      var duelRequest;
      Logger.log("Client", "Waiting for opponent " + opponent);
      duelRequest = {
        msgType: "requestDuel",
        data: [name, opponent]
      };
      return this.respond(duelRequest, socket);
    };

    Client.prototype.makeMove = function(result, socket) {
      var move;
      if (result.updateDirection) {
        Logger.log("Client", "Changed direction to: " + result.direction);
        move = {
          msgType: "changeDir",
          data: result.direction
        };
        return this.respond(move, socket);
      }
    };

    return Client;

  })(Tcp.Client);

  if (process.argv.length >= 4) {
    name = process.argv[2];
    host = process.argv[3];
    port = process.argv[4];
    opponent = process.argv[5];
    strategy = process.argv[6];
    new Client(name, host, port, opponent, strategy);
  } else {
    Logger.log("Usage", "client <name> <host> <port>");
  }

}).call(this);
