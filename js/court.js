// Generated by CoffeeScript 1.3.3
(function() {
  var Court, Singleton, root,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Singleton = (function() {

    function Singleton() {}

    Singleton._instance = null;

    Singleton.getInstance = function() {
      var _ref;
      return (_ref = this._instance) != null ? _ref : this._instance = (function(func, args, ctor) {
        ctor.prototype = func.prototype;
        var child = new ctor, result = func.apply(child, args), t = typeof result;
        return t == "object" || t == "function" ? result || child : child;
      })(this, arguments, function(){});
    };

    return Singleton;

  })();

  Court = (function(_super) {

    __extends(Court, _super);

    function Court(width, height, ballRadius) {
      this.ballRadius = ballRadius;
      this.left = 0.0;
      this.right = width;
      this.top = 0.0;
      this.bottom = height;
    }

    Court.prototype.insideCourt = function(vector) {
      return this.collisionOnLeft(vector) || this.collisionOnRight(vector);
    };

    Court.prototype.collisionOnLeft = function(vector) {
      return vector.x > this.left + this.ballRadius && vector.dx < 0;
    };

    Court.prototype.collisionOnRight = function(vector) {
      return vector.x < this.right - this.ballRadius && vector.dx > 0;
    };

    Court.prototype.leftWall = function() {
      var coordinates;
      coordinates = [
        {
          x: this.left + this.ballRadius,
          y: this.bottom - this.ballRadius
        }, {
          x: this.left + this.ballRadius,
          y: this.top + this.ballRadius
        }
      ];
      return coordinates;
    };

    Court.prototype.rightWall = function() {
      var coordinates;
      coordinates = [
        {
          x: this.right - this.ballRadius,
          y: this.bottom - this.ballRadius
        }, {
          x: this.right - this.ballRadius,
          y: this.top + this.ballRadius
        }
      ];
      return coordinates;
    };

    Court.prototype.topWall = function() {
      var coordinates;
      coordinates = [
        {
          x: this.left + this.ballRadius,
          y: this.top + this.ballRadius
        }, {
          x: this.right - this.ballRadius,
          y: this.top + this.ballRadius
        }
      ];
      return coordinates;
    };

    Court.prototype.bottomWall = function() {
      var coordinates;
      coordinates = [
        {
          x: this.left + this.ballRadius,
          y: this.bottom - this.ballRadius
        }, {
          x: this.right - this.ballRadius,
          y: this.bottom - this.ballRadius
        }
      ];
      return coordinates;
    };

    return Court;

  })(Singleton);

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  root.Court = Court;

}).call(this);
