// Generated by CoffeeScript 1.3.3
(function() {
  var AI, Court, Helper, Logger, root;

  Helper = require('./helper');

  Court = require('./court').Court;

  Logger = require('./logger');

  root = typeof exports !== "undefined" && exports !== null ? exports : window;

  AI = (function() {

    function AI() {
      this.court = Court.getInstance();
      this.multiplier = this.court.right * 2;
    }

    AI.prototype.defence = function(ball, opponent) {};

    AI.prototype.attack = function(ball, opponent) {};

    AI.prototype.predictFirstPosition = function(ball) {
      var vector;
      vector = {
        x: ball.position.x,
        y: ball.position.y,
        dx: ball.dx,
        dy: ball.dy
      };
      return this.predictSideCollision(vector);
    };

    AI.prototype.predictSideCollision = function(vector) {
      var tries;
      tries = 0;
      while (this.court.insideCourt(vector) && (tries < 10)) {
        vector = this.predict(vector);
        tries++;
      }
      return Helper.clone(vector);
    };

    AI.prototype.predict = function(vector) {
      var point, point0, point1;
      point0 = {
        x: vector.x,
        y: vector.y
      };
      point1 = {
        x: vector.x + this.multiplier * vector.dx,
        y: vector.y + this.multiplier * vector.dy
      };
      if (vector.dx < 0) {
        point = Helper.intersectWall(point0, point1, this.court.leftWall(), "x");
      } else {
        point = Helper.intersectWall(point0, point1, this.court.rightWall(), "x");
      }
      if (point === void 0) {
        if (vector.dy < 0) {
          point = Helper.intersectWall(point0, point1, this.court.topWall(), "y");
        } else {
          point = Helper.intersectWall(point0, point1, this.court.bottomWall(), "y");
        }
      }
      return this.newVector(point, vector.dx, vector.dy);
    };

    AI.prototype.newVector = function(point, dx, dy) {
      var vector;
      if (!point) {
        return;
      }
      vector = Helper.clone(point);
      switch (vector.collision) {
        case "x":
          vector.dx = dx;
          vector.dy = dy;
          break;
        case "y":
          vector.dx = dx;
          vector.dy = -dy;
      }
      return vector;
    };

    AI.prototype.timeToTarget = function(ball) {
      return Helper.timeToTarget(ball.position.x, ball.speed, this.court.right - this.court.ballRadius);
    };

    return AI;

  })();

  root = typeof exports !== "undefined" && exports !== null ? exports : window;

  root.AI = AI;

}).call(this);
